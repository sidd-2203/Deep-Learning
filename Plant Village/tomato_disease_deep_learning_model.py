# -*- coding: utf-8 -*-
"""Tomato Disease Deep Learning Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UqpsrX3U34AUc2iJ0AXqubLyplqthFuR
"""

import tensorflow as tf
from tensorflow.keras import models,layers
import matplotlib.pyplot as plt
import numpy as np

IMAGE_SIZE=256
BATCH_SIZE=32
CHANNELS=3
EPOCHS=15

dataset=tf.keras.preprocessing.image_dataset_from_directory(
    '/content/drive/MyDrive/Plant Village',
    shuffle='True',
    image_size=(IMAGE_SIZE,IMAGE_SIZE),
    batch_size=BATCH_SIZE)

class_names=dataset.class_names
class_names

#image is divided into batches of size of 32 so 141 batches
len(dataset)

141*32  # and I have 4500 images in total

plt.figure(figsize=(9,8))
for image_batch, label_batch in dataset.take(1):
  for i in range(12):
    ax=plt.subplot(3,4,i+1)
    print(image_batch.shape)
    print(label_batch)
    plt.title(class_names[label_batch[i]])
    plt.axis('off')
    plt.imshow(image_batch[i].numpy().astype('uint8'))

# 80% training
# 20% validation + test
# after every epoch use validation data to learn more

train_size=0.8
train_dataset_len=int(len(dataset)*train_size)
train_dataset=dataset.take(train_dataset_len)
test_dataset=dataset.skip(train_dataset_len)

len(test_dataset)

validation=0.5
val_dataset=test_dataset.take(14)
test_dataset=test_dataset.skip(14)

def get_dataset_partitions_df(ds,train_split=0.8,test_split=0.1,val_split=0.1,shuffle=True,shuffle_size=10000):
  ds_size=len(ds)
  if shuffle:
    ds.shuffle(shuffle_size,seed=12)
  train_size= int(train_split *ds_size)
  val_size=int(val_split *ds_size)
  train_ds=dataset.take(train_size)
  val_ds=dataset.skip(train_size).take(val_size)
  test_ds=dataset.skip(train_size).skip(val_size)
  return train_ds,val_ds,test_ds

train_ds,val_ds,test_ds= get_dataset_partitions_df(dataset)

len(train_ds)

train_ds.cache().shuffle(1000).prefetch(buffer_size=tf.data.AUTOTUNE)
val_ds.cache().shuffle(1000).prefetch(buffer_size=tf.data.AUTOTUNE)
test_ds.cache().shuffle(1000).prefetch(buffer_size=tf.data.AUTOTUNE)

#need to scale the image pixel intensitites

resize_and_rescale=tf.keras.Sequential([
    layers.experimental.preprocessing.Resizing(IMAGE_SIZE,IMAGE_SIZE),
  layers.experimental.preprocessing.Rescaling(1.0/255.0),

])

data_augmentation=tf.keras.Sequential([
    layers.experimental.preprocessing.RandomFlip('horizontal_and_vertical'),
    layers.experimental.preprocessing.RandomRotation(0.2),

])

image_shape=(BATCH_SIZE,IMAGE_SIZE,IMAGE_SIZE,CHANNELS)

n_classes=3
# these layers are based on trial and error

model=models.Sequential([
    resize_and_rescale,
    data_augmentation,
    layers.Conv2D(32,(3,3),activation='relu',input_shape=image_shape),
    layers.MaxPooling2D((2,2)),

    layers.Conv2D(64,kernel_size=(3,3),activation='relu'),
    layers.MaxPooling2D((2,2)),

    layers.Conv2D(64,kernel_size=(3,3),activation='relu'),
    layers.MaxPooling2D((2,2)),

    layers.Conv2D(64,kernel_size=(3,3),activation='relu'),
    layers.MaxPooling2D((2,2)),

    layers.Conv2D(64,kernel_size=(3,3),activation='relu'),
    layers.MaxPooling2D((2,2)),

    layers.Conv2D(64,kernel_size=(3,3),activation='relu'),
    layers.MaxPooling2D((2,2)),

    layers.Flatten(),
    layers.Dense(64,activation='relu'),
    layers.Dense(n_classes,activation='softmax')
])

model.build(input_shape=image_shape)

model.summary()

model.compile(
    optimizer='adam',
    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),
    metrics=['accuracy']
)

history=model.fit(
    train_ds,
    epochs=EPOCHS,
    batch_size=BATCH_SIZE,
    verbose=1,
    validation_data=val_ds
)

scores=model.evaluate(test_ds)

scores   #loss and accuracy

history

history.params

history.history.keys()

acc=history.history['accuracy']
loss=history.history['loss']
val_acc=history.history['val_accuracy']
val_loss=history.history['val_loss']

plt.figure(figsize=(10,10))
plt.subplot(1,2,1)
plt.plot(range(EPOCHS),acc,label='Training Accuracy')
plt.plot(range(EPOCHS),val_acc,label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')


plt.figure(figsize=(10,10))
plt.subplot(1,2,1)
plt.plot(range(EPOCHS),loss,label='Training Loss')
plt.plot(range(EPOCHS),val_loss,label='Validation Loss')
plt.legend(loc='lower right')
plt.title('Training and Validation Loss')
plt.show()

for images_batch,labels_batch in test_ds.take(1):
  first_image=images_batch[0].numpy().astype('uint8')
  first_label=labels_batch[0].numpy()

  print("First image to show")
  plt.imshow(first_image)
  print(f'Actual Label: {class_names[first_label]} ')
  batch_prediction=model.predict(images_batch)

  print(f'predicted label: {class_names[np.argmax(batch_prediction[0])]}')

def predict(model,img):
  img_array=tf.keras.preprocessing.image.img_to_array(img)
  img_array=tf.expand_dims(img_array,0)  #create a batch

  predictions=model.predict(img_array)
  predicted_class=class_names[np.argmax(predictions[0])]
  confidence =round(100*(np.max(predictions[0])))
  return predicted_class,confidence

for images,labels in test_ds.take(1):
  for i in range(9):
    ax=plt.subplot(3,3,i+1)
    plt.imshow(images[i].numpy().astype('uint8'))
    predicted_class,confidence=predict(model,images[i].numpy())
    actual_class=class_names[labels[i]]
    # plt.title(f'Actual Label: {actual_class}',f'\n Predicted Label: {predicted_class}.')
    plt.axis('off')

model_version=1
model.save('updated_model')

!zip -r /content/model.zip /content/updated_model

from google.colab import files
files.download("/content/model.zip")

convertor=tf.lite.TFLiteConverter.from_keras_model(model)
tf_lite_model=convertor.convert()

with open('model.tflite','wb') as f:
  f.write(tf_lite_model)

